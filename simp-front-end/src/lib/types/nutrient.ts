// types/nutrient.ts (or a similar location in your front-end project)

/**
 * Base interface representing the core properties of a Nutrient.
 * Matches the Pydantic NutrientBase schema.
 * Optional fields in Python (Optional[str], Optional[int]) map to `type | null` in TypeScript.
 */
export interface NutrientBase {
  nutrient_name: string;
  nutrient_symbol: string | null; // Optional string -> string | null
  unit: string;
  nutrient_decimals: number; // Default exists in backend, but it's a required number field
  primary_group: string | null; // Optional string -> string | null
  secondary_group: string | null; // Optional string -> string | null
  tertiary_group: string | null; // Optional string -> string | null
  quaternary_group: string | null; // Optional string -> string | null
  description: string | null; // Optional string -> string | null
  sort_order: number | null; // Optional int -> number | null (default exists in backend)
}

/**
 * Type representing the data payload sent TO the backend API
 * when **creating** a new nutrient (POST /nutrients/).
 * Matches the structure required by the NutrientCreate Pydantic schema.
 * Often identical to NutrientBase if no creation-specific fields are added.
 */
export type NutrientCreatePayload = NutrientBase;

/**
 * Type representing the data payload sent TO the backend API
 * when **updating** an existing nutrient (PUT or PATCH /nutrients/{nutrient_id}).
 * All fields are optional (`?`) to support partial updates.
 * Use `type | null` for fields that can be explicitly set to null.
 * Matches the NutrientUpdate Pydantic schema.
 */
export type NutrientUpdatePayload = {
  nutrient_name?: string;
  nutrient_symbol?: string | null;
  unit?: string;
  nutrient_decimals?: number;
  primary_group?: string | null;
  secondary_group?: string | null;
  tertiary_group?: string | null;
  quaternary_group?: string | null;
  description?: string | null;
  sort_order?: number | null;
};

/**
 * Interface representing the full Nutrient data received FROM the backend API.
 * Includes the nutrient_id generated by the database.
 * Matches the NutrientOut Pydantic schema.
 */
export interface NutrientOut extends NutrientBase {
  nutrient_id: string; // UUIDs are typically represented as strings in JSON
}

/**
 * Interface for the paginated response structure from the GET /nutrients/ endpoint.
 * Matches the dictionary structure returned by the read_nutrients endpoint.
 */
export interface PaginatedNutrients {
  items: NutrientOut[];
  total: number;
  skip: number;
  limit: number;
}