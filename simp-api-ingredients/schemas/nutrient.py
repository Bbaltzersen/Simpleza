# schemas/nutrient.py

import uuid
from pydantic import BaseModel, Field, ConfigDict
from typing import Optional

# --- Base Schema ---
# Contains common fields shared across create, update, and read operations.
class NutrientBase(BaseModel):
    nutrient_name: str = Field(
        ...,
        min_length=1,
        examples=["Total lipid (fat)", "Vitamin C, total ascorbic acid"],
        description="Standard name of the nutrient."
    )
    nutrient_symbol: Optional[str] = Field(
        default=None,
        max_length=20,
        examples=["FAT", "VITC"],
        description="Optional common symbol or shorthand (e.g., used in some datasets)."
    )
    unit: str = Field(
        ...,
        max_length=10,
        examples=["g", "mg", "Âµg", "kcal", "kJ", "%"],
        description="Standard unit of measurement for this nutrient."
    )
    nutrient_decimals: int = Field(
        default=2,
        ge=0, # Greater than or equal to 0
        le=10, # Less than or equal to 10
        description="Default number of decimal places for display or rounding purposes."
    )
    primary_group: Optional[str] = Field(
        default=None,
        max_length=50,
        examples=["Macronutrient", "Micronutrient", "Energy"],
        description="Top-level classification (e.g., Macronutrient, Micronutrient)."
    )
    secondary_group: Optional[str] = Field(
        default=None,
        max_length=50,
        examples=["Fat", "Vitamin", "Mineral"],
        description="Second-level classification (e.g., Protein, Vitamin, Mineral)."
    )
    tertiary_group: Optional[str] = Field(
        default=None,
        max_length=100,
        examples=["Saturated Fatty Acid", "Fat-Soluble Vitamin", "Essential Amino Acid"],
        description="Third-level classification (e.g., Essential Amino Acid, Trace Mineral)."
    )
    quaternary_group: Optional[str] = Field(
        default=None,
        max_length=100,
        examples=["Monosaccharide", "Branched Chain Amino Acid"],
        description="Fourth-level classification (e.g., Monosaccharide, specific FA group)."
    )
    description: Optional[str] = Field(
        default=None,
        examples=["Total sum of fatty acids expressed as triglycerides + cholesterol."],
        description="Optional detailed description or definition of the nutrient."
    )
    sort_order: Optional[int] = Field(
        default=9999,
        description="Optional value to control sorting order in lists or UI displays."
    )

# --- Create Schema ---
# Used when receiving data via POST to create a new nutrient.
# Inherits all fields from Base. Ensures required fields are provided.
class NutrientCreate(NutrientBase):
    # You can add custom validation logic here specific to creation if needed
    # For example, ensure symbol is unique if provided, although uniqueness
    # constraints are typically best handled at the database level or service layer.
    pass

# --- Update Schema ---
# Used when receiving data via PUT or PATCH to update an existing nutrient.
# All fields are optional, allowing partial updates.
class NutrientUpdate(BaseModel):
    # Note: We don't inherit from NutrientBase here to easily make ALL fields optional.
    # If inheriting, we'd need Pydantic features to make inherited fields optional.
    nutrient_name: Optional[str] = Field(default=None, min_length=1, examples=["Total lipid (fat)"])
    nutrient_symbol: Optional[str] = Field(default=None, max_length=20, examples=["FAT"])
    unit: Optional[str] = Field(default=None, max_length=10, examples=["g"])
    nutrient_decimals: Optional[int] = Field(default=None, ge=0, le=10)
    primary_group: Optional[str] = Field(default=None, max_length=50)
    secondary_group: Optional[str] = Field(default=None, max_length=50)
    tertiary_group: Optional[str] = Field(default=None, max_length=100)
    quaternary_group: Optional[str] = Field(default=None, max_length=100)
    description: Optional[str] = Field(default=None)
    sort_order: Optional[int] = Field(default=None)

    # Ensure at least one field is provided for update (optional validation)
    # @model_validator(mode='after')
    # def check_at_least_one_value(self) -> 'NutrientUpdate':
    #     if not self.model_dump(exclude_unset=True):
    #         raise ValueError("At least one field must be provided for update")
    #     return self

# --- Output Schema ---
# Used when returning nutrient data from the API (includes database ID).
# Inherits from Base and adds fields generated by the database or needed for output.
class NutrientOut(NutrientBase):
    nutrient_id: uuid.UUID

    # Pydantic V2 configuration to allow mapping from ORM objects
    model_config = ConfigDict(
        from_attributes=True  # Replaces orm_mode = True in Pydantic v1
    )

    # # Pydantic V1 Config (if using older version)
    # class Config:
    #     orm_mode = True

    